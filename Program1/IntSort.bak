#lang racket
(define (prompt-file-path)
  (display "Enter the file path: ")
  (flush-output)
  (read-line (current-input-port) 'any))

(define (counting-sort-user-input)
  (let ((filename (prompt-file-path)))
    (counting-sort filename)))

; Function to count occurrences of each integer in a list and return value-count pairs
(define (count-occurrences lst)
  (define hash-table (make-hash))
  (for-each (lambda (x) (hash-update! hash-table x add1 0)) lst)
  (sort (hash-map hash-table cons) < #:key car))

; Function to sort the value-count pairs by value (already sorted in count-occurrences)
(define (sort-value-count-pairs pairs)
  (sort pairs < #:key car))

; Function to expand value-count pairs into a sorted list of integers
(define (expand-value-count-pairs pairs)
  (apply append (map (lambda (pair) (make-list (cdr pair) (car pair))) pairs)))

; Function to verify if a list is sorted
(define (is-sorted? lst)
  (or (null? lst)
      (null? (cdr lst))
      (and (<= (car lst) (cadr lst)) (is-sorted? (cdr lst)))))

; Function to read a list of integers from a file
(define (read-integers filename)
  (with-input-from-file filename
    (lambda ()
      (let loop ((nums '()))
        (define val (read))
        (if (eof-object? val)
            (reverse nums)
            (loop (cons val nums)))))))

; Function to sort the integers from a file using counting sort
(define (counting-sort filename)
  (let* ((nums (read-integers filename))
         (value-counts (count-occurrences nums))
         (sorted-integers (expand-value-count-pairs value-counts)))
    (displayln "Sorted List: ")
    (displayln sorted-integers)
    (displayln (string-append "List is sorted: " (if (is-sorted? sorted-integers) "Yes" "No")))
    sorted-integers))

; Example usage:
; (counting-sort "numbers.txt")