LLM Project Log
ChatGPT4o
*Prompts will start with a letter, steps taken on project are labeled with numbers*
"RESULT:" is the result of the previous LLM prompt
===================================================================================
1. Created this log file
2. Created GIT repo and cloned to local
3. Created folders for data and program
4. Created RKT program (IntSort.rkt)
5. First AI prompt-Copy paste problem description to get a starting point.

A. Use the programming language "Racket" to implement the following program. 
Do not do the following: Use libraries
The following is required: Implement the four functions at the bottom.
The Program:
• Your program will implement an integer-sorting routine – a counting sort. You will need to do
this in a couple of steps. Note that your code cannot call the library sort function. (An AI will
want to call it at some point.)
• Your program will be given a text file of integers (positive or negative, but all will fit within 32
bits). You should carry out two steps:
◦ Consolidate the list into a list of value-frequency pairs. Given the list (1 2 3 2 2 3 5 -1), you
would produce ( (-1 1) (1 1) (2 3) (3 2) (5 1) ).
◦ Given the list of value-count pairs, produce a sorted list; that is, from the above you would
produce (-1 1 2 2 2 3 3 5).
• There is a data structure called a hash that you will find useful. There are 2 versions in Racket,
one that is functional, the other procedural.
◦ Functional version: the insert & remove functions take a hash, & an item, and return a
reference to a new hash.
◦ Procedural version: The insert & remove functions modify the structure in place.
◦ For this course, you can use either version, but be consistent in which you use.
• Utility functions you will probably find useful:
◦ Given a list of integers, return a list of value-count pairs
◦ Sort a list of value-count pairs by value
◦ Given a sorted list of value-count pairs, produce a sorted list of integers
◦ Given a list of integers, confirm the list is sorted

RESULT:
#lang racket

; Function to count occurrences of each integer in a list and return value-count pairs
(define (count-occurrences lst)
  (define hash-table (make-hash))
  (for-each (lambda (x) (hash-update! hash-table x add1 0)) lst)
  (sort (hash-map hash-table cons) < #:key car))

; Function to sort the value-count pairs by value (already sorted in count-occurrences)
(define (sort-value-count-pairs pairs)
  (sort pairs < #:key car))

; Function to expand value-count pairs into a sorted list of integers
(define (expand-value-count-pairs pairs)
  (apply append (map (lambda (pair) (make-list (cdr pair) (car pair))) pairs)))

; Function to verify if a list is sorted
(define (is-sorted? lst)
  (or (null? lst)
      (null? (cdr lst))
      (and (<= (car lst) (cadr lst)) (is-sorted? (cdr lst)))))

; Function to read a list of integers from a file
(define (read-integers filename)
  (with-input-from-file filename
    (lambda ()
      (let loop ((nums '()))
        (define val (read))
        (if (eof-object? val)
            (reverse nums)
            (loop (cons val nums)))))))

; Function to sort the integers from a file using counting sort
(define (counting-sort filename)
  (let* ((nums (read-integers filename))
         (value-counts (count-occurrences nums))
         (sorted-integers (expand-value-count-pairs value-counts)))
    (displayln "Sorted List: ")
    (displayln sorted-integers)
    (displayln (string-append "List is sorted: " (if (is-sorted? sorted-integers) "Yes" "No")))
    sorted-integers))

; Example usage:
; (counting-sort "numbers.txt")

6. Ok got something to work with. How do I run this?
B. How do I run this program using Visual Studio Code?

RESULT:
Install Racket. Install VS code racket extension.
Call program using "racket programname.rkt"

7. Installed Racket and VS extension "Racket"
8. Read about DrRacket and began using this to test program.

C. How can I point the program to a specific folder/file that contains the integers I want to sort?
RESULT:

Option 1: Let the User Enter a File Path

Modify your counting-sort function to ask for user input:

(define (prompt-file-path)
  (display "Enter the file path: ")
  (flush-output)
  (read-line (current-input-port) 'any))

(define (counting-sort-user-input)
  (let ((filename (prompt-file-path)))
    (counting-sort filename)))

; Run the program by calling:
(counting-sort-user-input)
How it works: When you run the program, it asks for the file path, and you type it in.

9. Added this functionality to the program.
10. Removed almost right away as it was easier to hardcode the list of data files and uncomment out the one I wanted to run.
11. At this point, the initial version I was given by the LLM IS working to my surprise. I am not getting any output for the value-frequency pairs and value-count pairs.
 
D. The program is producing a sorted string. Here is a sample of the output:
"Sorted List: 
(1 1 2 3 3 3 5 6 6 7 7 8 8 8 8 8 8 9 9 10)
List is sorted: Yes
'(1 1 2 3 3 3 5 6 6 7 7 8 8 8 8 8 8 9 9 10)" I want the output of these two functions as well: value-frequency pairs and value-count pairs"

RESULT: To modify the program so that it also prints the value-frequency pairs and value-count pairs, update the counting-sort function to include additional output statements.
Updated Racket Code

#lang racket

; Function to count occurrences of each integer in a list and return value-count pairs
(define (count-occurrences lst)
  (define hash-table (make-hash))
  (for-each (lambda (x) (hash-update! hash-table x add1 0)) lst)
  (hash-map hash-table cons))

; Function to sort the value-count pairs by value
(define (sort-value-count-pairs pairs)
  (sort pairs < #:key car))

; Function to expand value-count pairs into a sorted list of integers
(define (expand-value-count-pairs pairs)
  (apply append (map (lambda (pair) (make-list (cdr pair) (car pair))) pairs)))

; Function to verify if a list is sorted
(define (is-sorted? lst)
  (or (null? lst)
      (null? (cdr lst))
      (and (<= (car lst) (cadr lst)) (is-sorted? (cdr lst)))))

; Function to read a list of integers from a file
(define (read-integers filename)
  (with-input-from-file filename
    (lambda ()
      (let loop ((nums '()))
        (define val (read))
        (if (eof-object? val)
            (reverse nums)
            (loop (cons val nums)))))))

; Function to sort the integers from a file using counting sort
(define (counting-sort filename)
  (let* ((nums (read-integers filename))
         (value-counts (count-occurrences nums))
         (sorted-value-counts (sort-value-count-pairs value-counts))
         (sorted-integers (expand-value-count-pairs sorted-value-counts)))
    (displayln "Value-Frequency Pairs: ")
    (displayln value-counts)
    (displayln "Sorted Value-Count Pairs: ")
    (displayln sorted-value-counts)
    (displayln "Sorted List: ")
    (displayln sorted-integers)
    (displayln (string-append "List is sorted: " (if (is-sorted? sorted-integers) "Yes" "No")))
    sorted-integers))

; Example usage:
; (counting-sort "C:/dev/CS441/data/data-1.txt")

**** I will note it did not produce the correct file path at the bottom, did not include that ****

12. Ran the program on "data-1". 
Output: Value-Frequency Pairs: 
((1 . 2) (2 . 1) (3 . 3) (5 . 1) (6 . 2) (7 . 2) (8 . 6) (9 . 2) (10 . 1))
Sorted Value-Count Pairs: 
((1 . 2) (2 . 1) (3 . 3) (5 . 1) (6 . 2) (7 . 2) (8 . 6) (9 . 2) (10 . 1))
Sorted List: 
(1 1 2 3 3 3 5 6 6 7 7 8 8 8 8 8 8 9 9 10)
List is sorted: Yes
'(1 1 2 3 3 3 5 6 6 7 7 8 8 8 8 8 8 9 9 10)
> 
13. Appears to be working correctly, Going through and testing on all of the data-X files. 
14. No issues until data-6. Giving me a weird output of the contents of the file. 

E. "The file "data-6" contains the following: -27 4 4 4 4 4 4 4 4 -51 4 4 4 -35 4 4 4 4 4 4 4 4 4 4 4 4 4 4 87 89 -62 4 4 4 -32 4 4 4 4 -10 4 4 -77 4 4 4 4 4 70 4 -24 98 4 4 4 4 4 28 99 4 85 4 -57 4 4 4 -88 4 4 4 4 4 -67 -35 33 4 4 4 4 67 4 4 51 4 4 4 4 4 4 59 4 4 -16 4 4 4 4 4 4 58 4 10 4 4 4 4 4 -25 4 4 4 4 4 4 4 4 4 4 77 28 31 4 -15 4 4 4 24 4 4 4 52 13 4 -96 4 -80 4 17 4 4 4 4 -76 4 4 -55 4 -1 4 4 -53 4 4 4 4 -13 4 4 4 -63 4 4 4 4 4 4 4 4 4 27 4 -71 4 4 33 4 -81 4 4 4 4 4 4 4 83 4 4 4 4 4 4 4 4 4 11 -33 4 4 4 4

When I run the program on it, I get this as the output: Value-Frequency Pairs: 
((-51 . 1) (67 . 1) (-53 . 1) (4 . 150) (-55 . 1) (70 . 1) (-57 . 1) (10 . 1) (11 . 1) (-62 . 1) (77 . 1) (13 . 1) (-63 . 1) (-33 . 1) (17 . 1) (-35 . 2) (83 . 1) (85 . 1) (87 . 1) (24 . 1) (89 . 1) (27 . 1) (28 . 2) (31 . 1) (-81 . 1) (33 . 2) (98 . 1) (99 . 1) (-24 . 1) (-88 . 1) (-25 . 1) (-27 . 1) (-96 . 1) (-32 . 1) (-1 . 1) (-67 . 1) (51 . 1) (52 . 1) (-71 . 1) (-10 . 1) (58 . 1) (-76 . 1) (59 . 1) (-13 . 1) (-77 . 1) (-15 . 1) (-80 . 1) (-16 . 1))
Sorted Value-Count Pairs: 
((-96 . 1) (-88 . 1) (-81 . 1) (-80 . 1) (-77 . 1) (-76 . 1) (-71 . 1) (-67 . 1) (-63 . 1) (-62 . 1) (-57 . 1) (-55 . 1) (-53 . 1) (-51 . 1) (-35 . 2) (-33 . 1) (-32 . 1) (-27 . 1) (-25 . 1) (-24 . 1) (-16 . 1) (-15 . 1) (-13 . 1) (-10 . 1) (-1 . 1) (4 . 150) (10 . 1) (11 . 1) (13 . 1) (17 . 1) (24 . 1) (27 . 1) (28 . 2) (31 . 1) (33 . 2) (51 . 1) (52 . 1) (58 . 1) (59 . 1) (67 . 1) (70 . 1) (77 . 1) (83 . 1) (85 . 1) (87 . 1) (89 . 1) (98 . 1) (99 . 1))
Sorted List: 
(-96 -88 -81 -80 -77 -76 -71 -67 -63 -62 -57 -55 -53 -51 -35 -35 -33 -32 -27 -25 -24 -16 -15 -13 -10 -1 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 10 11 13 17 24 27 28 28 31 33 33 51 52 58 59 67 70 77 83 85 87 89 98 99)
List is sorted: Yes
'(-96
  -88
  -81
  -80
  -77
  -76
  -71
  -67
  -63
  -62
  -57
  -55
  -53
  -51
  -35
  -35
  -33
  -32
  -27
  -25
  -24
  -16
  -15
  -13
  -10
  -1
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  4
  10
  11
  13
  17
  24
  27
  28
  28
  31
  33
  33
  51
  52
  58
  59
  67
  70
  77
  83
  85
  87
  89
  98
  99)
> 

Why is that?"

RESULT: Fix: Explicitly Format Output

To avoid double output, modify counting-sort:

(displayln "Sorted List: ")
(for-each (lambda (x) (display x) (display " ")) sorted-integers)
(newline)  ; Ensures proper formatting

(displayln (string-append "List is sorted: " (if (is-sorted? sorted-integers) "Yes" "No")))

(void)  ; Prevents Racket from printing the list again

What This Fix Does

    for-each prints the sorted list on one line with spaces instead of a raw list.
    newline ensures that the "List is sorted" output appears correctly.
    void prevents the function from returning the sorted list, stopping Racket's REPL from printing it again in '(...) format.

15. Made this change and ran the program on data-6 again.
16. Fixed the issue! Output now:
Value-Frequency Pairs: 
((-51 . 1) (67 . 1) (-53 . 1) (4 . 150) (-55 . 1) (70 . 1) (-57 . 1) (10 . 1) (11 . 1) (-62 . 1) (77 . 1) (13 . 1) (-63 . 1) (-33 . 1) (17 . 1) (-35 . 2) (83 . 1) (85 . 1) (87 . 1) (24 . 1) (89 . 1) (27 . 1) (28 . 2) (31 . 1) (-81 . 1) (33 . 2) (98 . 1) (99 . 1) (-24 . 1) (-88 . 1) (-25 . 1) (-27 . 1) (-96 . 1) (-32 . 1) (-1 . 1) (-67 . 1) (51 . 1) (52 . 1) (-71 . 1) (-10 . 1) (58 . 1) (-76 . 1) (59 . 1) (-13 . 1) (-77 . 1) (-15 . 1) (-80 . 1) (-16 . 1))
Sorted Value-Count Pairs: 
((-96 . 1) (-88 . 1) (-81 . 1) (-80 . 1) (-77 . 1) (-76 . 1) (-71 . 1) (-67 . 1) (-63 . 1) (-62 . 1) (-57 . 1) (-55 . 1) (-53 . 1) (-51 . 1) (-35 . 2) (-33 . 1) (-32 . 1) (-27 . 1) (-25 . 1) (-24 . 1) (-16 . 1) (-15 . 1) (-13 . 1) (-10 . 1) (-1 . 1) (4 . 150) (10 . 1) (11 . 1) (13 . 1) (17 . 1) (24 . 1) (27 . 1) (28 . 2) (31 . 1) (33 . 2) (51 . 1) (52 . 1) (58 . 1) (59 . 1) (67 . 1) (70 . 1) (77 . 1) (83 . 1) (85 . 1) (87 . 1) (89 . 1) (98 . 1) (99 . 1))
Sorted List: 
-96 -88 -81 -80 -77 -76 -71 -67 -63 -62 -57 -55 -53 -51 -35 -35 -33 -32 -27 -25 -24 -16 -15 -13 -10 -1 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 10 11 13 17 24 27 28 28 31 33 33 51 52 58 59 67 70 77 83 85 87 89 98 99 
List is sorted: Yes
17. Ran data-7 :O
ERROR: The evaluation thread is no longer running, so no evaluation can take place until the next execution.

The program ran out of memory.
18. MORE MEMORY!!
19. Uses about 600MB of memory to sort the list. 
20. The main issue is I am outputting the results from each step. So it is trying to output 1 million results EACH TIME. 

F. "data-7.txt contains a million records. How can I add a check, that removes outputting the result string and just outputting if the string sorted or not?"

RESULT:
Solution: Add a Check for Large Files

Modify your counting-sort function to check the length of the list before deciding what to print.
Updated counting-sort Function

; Function to sort the integers from a file using counting sort
(define (counting-sort filename)
  (let* ((nums (read-integers filename))
         (value-counts (count-occurrences nums))
         (sorted-value-counts (sort-value-count-pairs value-counts))
         (sorted-integers (expand-value-count-pairs sorted-value-counts))
         (list-size (length nums)))  ; Get the size of the list
    
    (displayln "Value-Frequency Pairs: ")
    (displayln value-counts)
    
    (displayln "Sorted Value-Count Pairs: ")
    (displayln sorted-value-counts)
    
    ; Only print the sorted list if it’s small (< 100 elements)
    (when (< list-size 100)
      (displayln "Sorted List: ")
      (for-each (lambda (x) (display x) (display " ")) sorted-integers)
      (newline))  ; Ensures proper formatting
    
    ; Always print whether the list is sorted
    (displayln (string-append "List is sorted: " (if (is-sorted? sorted-integers) "Yes" "No")))
    
    (void)))  ; Prevents returning the sorted list in the REPL

How This Works

    (length nums): Computes the total number of integers in the file.
    Conditional Check (when (< list-size 100)):
        If the list has fewer than 100 numbers, print the full sorted list.
        If the list has 100 or more numbers, skip printing the sorted list to avoid performance issues.
    The function always prints whether the list is sorted ("List is sorted: Yes/No").

21. Made this change. Tested with data-7 again.
22. Still printing the Value-Frequency pairs.

G. "The file is over 100 and still printing the Value-Frequency Pairs"

RESULT: It looks like the issue might be due to the condition in the when clause not being triggered as expected for files with more than 100 numbers. This could be because the size of nums may not be computed properly or there's an issue with how the comparison is done. Let's add some debugging and make sure that the check is working correctly.

Here's the updated code with additional debugging output and a fix:
Updated Code with Debugging

(define (counting-sort filename)
  (let* ((nums (read-integers filename))
         (value-counts (count-occurrences nums))
         (sorted-value-counts (sort-value-count-pairs value-counts))
         (sorted-integers (expand-value-count-pairs sorted-value-counts))
         (list-size (length nums)))  ; Get the size of the list

    ; Debugging output to see list size
    (displayln (string-append "List size: " (number->string list-size)))
    
    ; Only print details for small datasets
    (when (< list-size 100)
      (displayln "Value-Frequency Pairs: ")
      (displayln value-counts)
      
      (displayln "Sorted Value-Count Pairs: ")
      (displayln sorted-value-counts)
      
      (displayln "Sorted List: ")
      (for-each (lambda (x) (display x) (display " ")) sorted-integers)
      (newline))  ; Ensures proper formatting

    ; Always print whether the list is sorted
    (displayln (string-append "List is sorted: " (if (is-sorted? sorted-integers) "Yes" "No")))

    (void)))  ; Prevents returning the sorted list in the REPL

What’s Changed

    Debugging output is added to print the list size, so you can verify if the size check is working correctly.
    List size will be printed, confirming if it's actually over 100.

23. Running again after making the debug changes.
24. Appears to be working. Got this as the result:
List size: 1000000
List is sorted: Yes
25. Dare I try with a larger file? (copy pasted the data in data-7 a couple times. Lets try it)
26. It worked! Only a few seconds to sort. 
27. Realize at this point I do not have any testing added.

H. "Ok, the program is working the way I intended. How can I add tests to ensure the functions are working properly? Here is a copy of the state of my program: #lang racket

; Function to count occurrences of each integer in a list and return value-count pairs
(define (count-occurrences lst)
  (define hash-table (make-hash))
  (for-each (lambda (x) (hash-update! hash-table x add1 0)) lst)
  (hash-map hash-table cons))

; Function to sort the value-count pairs by value
(define (sort-value-count-pairs pairs)
  (sort pairs < #:key car))

; Function to expand value-count pairs into a sorted list of integers
(define (expand-value-count-pairs pairs)
  (apply append (map (lambda (pair) (make-list (cdr pair) (car pair))) pairs)))

; Function to verify if a list is sorted
(define (is-sorted? lst)
  (or (null? lst)
      (null? (cdr lst))
      (and (<= (car lst) (cadr lst)) (is-sorted? (cdr lst)))))

; Function to read a list of integers from a file
(define (read-integers filename)
  (with-input-from-file filename
    (lambda ()
      (let loop ((nums '()))
        (define val (read))
        (if (eof-object? val)
            (reverse nums)
            (loop (cons val nums)))))))

(define (counting-sort filename)
  (let* ((nums (read-integers filename))
         (value-counts (count-occurrences nums))
         (sorted-value-counts (sort-value-count-pairs value-counts))
         (sorted-integers (expand-value-count-pairs sorted-value-counts))
         (list-size (length nums)))  ; Get the size of the list

    ; Only print details for small datasets
    (when (< list-size 1000)
      (displayln "Value-Frequency Pairs: ")
      (displayln value-counts)
      
      (displayln "Sorted Value-Count Pairs: ")
      (displayln sorted-value-counts)
      
      (displayln "Sorted List: ")
      (for-each (lambda (x) (display x) (display " ")) sorted-integers)
      (newline))  ; Ensures proper formatting

    ; Always print whether the list is sorted
    (displayln (string-append "List is sorted: " (if (is-sorted? sorted-integers) "Yes" "No")))

    (void)))  ; Prevents returning the sorted list in the REPL
    
; Example usage:
(counting-sort "./data/data-1.txt")
(counting-sort "./data/data-2.txt")
(counting-sort "./data/data-3.txt")
(counting-sort "./data/data-4.txt")
(counting-sort "./data/data-5.txt")
(counting-sort "./data/data-6.txt")
(counting-sort "./data/data-7.txt")
"

RESULT: To test the functions in your program and ensure they're working properly, we can write unit tests for each of the core functions. Racket has a built-in testing framework called rackunit, which makes it easy to define tests and check whether functions produce the expected results.
Steps to Add Tests:

    Import the rackunit testing framework.
    Write tests for each function you want to verify.
    Run the tests and inspect the results.

Here’s how you can modify your program to include tests for each of your core functions:
Updated Code with Tests

#lang racket

(require rackunit)

; Function to count occurrences of each integer in a list and return value-count pairs
(define (count-occurrences lst)
  (define hash-table (make-hash))
  (for-each (lambda (x) (hash-update! hash-table x add1 0)) lst)
  (hash-map hash-table cons))

; Function to sort the value-count pairs by value
(define (sort-value-count-pairs pairs)
  (sort pairs < #:key car))

; Function to expand value-count pairs into a sorted list of integers
(define (expand-value-count-pairs pairs)
  (apply append (map (lambda (pair) (make-list (cdr pair) (car pair))) pairs)))

; Function to verify if a list is sorted
(define (is-sorted? lst)
  (or (null? lst)
      (null? (cdr lst))
      (and (<= (car lst) (cadr lst)) (is-sorted? (cdr lst)))))

; Function to read a list of integers from a file
(define (read-integers filename)
  (with-input-from-file filename
    (lambda ()
      (let loop ((nums '()))
        (define val (read))
        (if (eof-object? val)
            (reverse nums)
            (loop (cons val nums)))))))

; Function to sort the integers from a file using counting sort
(define (counting-sort filename)
  (let* ((nums (read-integers filename))
         (value-counts (count-occurrences nums))
         (sorted-value-counts (sort-value-count-pairs value-counts))
         (sorted-integers (expand-value-count-pairs sorted-value-counts))
         (list-size (length nums)))  ; Get the size of the list

    ; Only print details for small datasets
    (when (< list-size 1000)
      (displayln "Value-Frequency Pairs: ")
      (displayln value-counts)
      
      (displayln "Sorted Value-Count Pairs: ")
      (displayln sorted-value-counts)
      
      (displayln "Sorted List: ")
      (for-each (lambda (x) (display x) (display " ")) sorted-integers)
      (newline))  ; Ensures proper formatting

    ; Always print whether the list is sorted
    (displayln (string-append "List is sorted: " (if (is-sorted? sorted-integers) "Yes" "No")))

    (void)))  ; Prevents returning the sorted list in the REPL

; Unit tests for the functions

; Test 1: count-occurrences function
(define test-list '(1 2 2 3 3 3 4))
(define expected-counts (make-hash '((1 . 1) (2 . 2) (3 . 3) (4 . 1))))
(check-equal? (count-occurrences test-list) expected-counts)

; Test 2: sort-value-count-pairs function
(define unsorted-pairs '((3 . 2) (1 . 4) (4 . 1) (2 . 3)))
(define sorted-pairs '((1 . 4) (2 . 3) (3 . 2) (4 . 1)))
(check-equal? (sort-value-count-pairs unsorted-pairs) sorted-pairs)

; Test 3: expand-value-count-pairs function
(define value-count-pairs '((1 . 2) (2 . 3) (3 . 1)))
(define expanded-list '(1 1 2 2 2 3))
(check-equal? (expand-value-count-pairs value-count-pairs) expanded-list)

; Test 4: is-sorted? function
(define sorted-list '(1 2 3 4 5))
(define unsorted-list '(5 4 3 2 1))
(check-true (is-sorted? sorted-list))
(check-false (is-sorted? unsorted-list))

; Test 5: read-integers function
(define test-file "test.txt")
(with-output-to-file test-file
  (lambda ()
    (display "1 2 3 4 5")))
(check-equal? (read-integers test-file) '(1 2 3 4 5))

; Example usage:
(counting-sort "./data/data-1.txt")
(counting-sort "./data/data-2.txt")
(counting-sort "./data/data-3.txt")
(counting-sort "./data/data-4.txt")
(counting-sort "./data/data-5.txt")
(counting-sort "./data/data-6.txt")
(counting-sort "./data/data-7.txt")

Explanation of Tests:

    Test 1: count-occurrences:
        We test that count-occurrences correctly counts the number of occurrences of each integer in a list.

    Test 2: sort-value-count-pairs:
        We check if the function correctly sorts a list of pairs by their values.

    Test 3: expand-value-count-pairs:
        This test verifies if the function properly expands the value-count pairs into a list of repeated integers.

    Test 4: is-sorted?:
        We test whether the list is sorted, both for sorted and unsorted cases.

    Test 5: read-integers:
        We write a test file test.txt and check that read-integers reads the integers correctly from the file.

Running the Tests:

    When you run the code, Racket will execute the tests, and if all assertions are correct, the program will finish without any error.
    If a test fails, Racket will give you feedback on which test failed and what the expected value was.

28. Added the unit tests. Saved and ran program in DrRacket.
29. Received an error:
Language: racket, with debugging; memory limit: 256 MB.
--------------------
. FAILURE
name:       check-equal?
location:   IntSort.rkt:65:0
actual:     '((1 . 1) (2 . 2) (3 . 3) (4 . 1))
expected:   '#hash((1 . 1) (2 . 2) (3 . 3) (4 . 1))
--------------------
I. "Getting this error, can you explain why? Language: racket, with debugging; memory limit: 256 MB.
--------------------
. FAILURE
name:       check-equal?
location:   IntSort.rkt:65:0
actual:     '((1 . 1) (2 . 2) (3 . 3) (4 . 1))
expected:   '#hash((1 . 1) (2 . 2) (3 . 3) (4 . 1))
--------------------"

RESULT: The error you're encountering is related to a mismatch between the actual value returned by count-occurrences and the expected value in your test.
Explanation of the Error:

    The error message indicates that the test was expecting a hash table (i.e., #hash(...)), but the actual result was a list of value-count pairs ('((1 . 1) (2 . 2) (3 . 3) (4 . 1))).
    The function count-occurrences returns a list of pairs, not a hash table. The expected value in your test is defined as a hash table, which is causing the mismatch.

Fixing the Test:

Since the count-occurrences function returns a list of pairs (e.g., '((1 . 1) (2 . 2) (3 . 3) (4 . 1))), you need to update your test to reflect that. Here's how you can correct the test:
Updated Test for count-occurrences:

(define test-list '(1 2 2 3 3 3 4))
(define expected-counts '((1 . 1) (2 . 2) (3 . 3) (4 . 1)))  ; Using a list of pairs instead of a hash table
(check-equal? (count-occurrences test-list) expected-counts)


30. Made the change above. Running program again. 
31. Worked perfectly. All tests passed. Ran in under 2 seconds. 
Output of the run:
Value-Frequency Pairs: 
((1 . 2) (2 . 1) (3 . 3) (5 . 1) (6 . 2) (7 . 2) (8 . 6) (9 . 2) (10 . 1))
Sorted Value-Count Pairs: 
((1 . 2) (2 . 1) (3 . 3) (5 . 1) (6 . 2) (7 . 2) (8 . 6) (9 . 2) (10 . 1))
Sorted List: 
1 1 2 3 3 3 5 6 6 7 7 8 8 8 8 8 8 9 9 10 
List is sorted: Yes
Value-Frequency Pairs: 
((32 . 1) (1 . 1) (34 . 1) (2 . 1) (37 . 1) (38 . 1) (6 . 1) (40 . 1) (8 . 1) (9 . 1) (44 . 1) (45 . 1) (15 . 1) (48 . 1) (49 . 1) (18 . 1) (19 . 1) (21 . 1) (22 . 1) (26 . 1))
Sorted Value-Count Pairs: 
((1 . 1) (2 . 1) (6 . 1) (8 . 1) (9 . 1) (15 . 1) (18 . 1) (19 . 1) (21 . 1) (22 . 1) (26 . 1) (32 . 1) (34 . 1) (37 . 1) (38 . 1) (40 . 1) (44 . 1) (45 . 1) (48 . 1) (49 . 1))
Sorted List: 
1 2 6 8 9 15 18 19 21 22 26 32 34 37 38 40 44 45 48 49 
List is sorted: Yes
Value-Frequency Pairs: 
((2 . 5))
Sorted Value-Count Pairs: 
((2 . 5))
Sorted List: 
2 2 2 2 2 
List is sorted: Yes
Value-Frequency Pairs: 
((1 . 1) (2 . 1) (3 . 1) (4 . 1) (5 . 1))
Sorted Value-Count Pairs: 
((1 . 1) (2 . 1) (3 . 1) (4 . 1) (5 . 1))
Sorted List: 
1 2 3 4 5 
List is sorted: Yes
Value-Frequency Pairs: 
((-17 . 1) (1 . 1) (2 . 1) (-22 . 1) (5 . 1) (6 . 1) (-24 . 1) (7 . 1) (-25 . 1) (8 . 1) (9 . 1) (10 . 1) (12 . 1) (13 . 1) (15 . 1) (-1 . 1) (20 . 1) (-7 . 1) (-8 . 1) (-14 . 1))
Sorted Value-Count Pairs: 
((-25 . 1) (-24 . 1) (-22 . 1) (-17 . 1) (-14 . 1) (-8 . 1) (-7 . 1) (-1 . 1) (1 . 1) (2 . 1) (5 . 1) (6 . 1) (7 . 1) (8 . 1) (9 . 1) (10 . 1) (12 . 1) (13 . 1) (15 . 1) (20 . 1))
Sorted List: 
-25 -24 -22 -17 -14 -8 -7 -1 1 2 5 6 7 8 9 10 12 13 15 20 
List is sorted: Yes
Value-Frequency Pairs: 
((-51 . 1) (67 . 1) (-53 . 1) (4 . 150) (-55 . 1) (70 . 1) (-57 . 1) (10 . 1) (11 . 1) (-62 . 1) (77 . 1) (13 . 1) (-63 . 1) (-33 . 1) (17 . 1) (-35 . 2) (83 . 1) (85 . 1) (87 . 1) (24 . 1) (89 . 1) (27 . 1) (28 . 2) (31 . 1) (-81 . 1) (33 . 2) (98 . 1) (99 . 1) (-24 . 1) (-88 . 1) (-25 . 1) (-27 . 1) (-96 . 1) (-32 . 1) (-1 . 1) (-67 . 1) (51 . 1) (52 . 1) (-71 . 1) (-10 . 1) (58 . 1) (-76 . 1) (59 . 1) (-13 . 1) (-77 . 1) (-15 . 1) (-80 . 1) (-16 . 1))
Sorted Value-Count Pairs: 
((-96 . 1) (-88 . 1) (-81 . 1) (-80 . 1) (-77 . 1) (-76 . 1) (-71 . 1) (-67 . 1) (-63 . 1) (-62 . 1) (-57 . 1) (-55 . 1) (-53 . 1) (-51 . 1) (-35 . 2) (-33 . 1) (-32 . 1) (-27 . 1) (-25 . 1) (-24 . 1) (-16 . 1) (-15 . 1) (-13 . 1) (-10 . 1) (-1 . 1) (4 . 150) (10 . 1) (11 . 1) (13 . 1) (17 . 1) (24 . 1) (27 . 1) (28 . 2) (31 . 1) (33 . 2) (51 . 1) (52 . 1) (58 . 1) (59 . 1) (67 . 1) (70 . 1) (77 . 1) (83 . 1) (85 . 1) (87 . 1) (89 . 1) (98 . 1) (99 . 1))
Sorted List: 
-96 -88 -81 -80 -77 -76 -71 -67 -63 -62 -57 -55 -53 -51 -35 -35 -33 -32 -27 -25 -24 -16 -15 -13 -10 -1 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 10 11 13 17 24 27 28 28 31 33 33 51 52 58 59 67 70 77 83 85 87 89 98 99 
List is sorted: Yes
List is sorted: Yes

32. At this point, the program has completed all of the requirements and I am satisfied with how it runs. 
33. Creating discussion doc.
34. Pushed code/files to Github